# -*-Perl-*-

# runEC2.ntest -
#
# System tests for EC-EC2 plugin
#
# Copyright (c) 2005-2011 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use Socket;
use Sys::Hostname;

# read in setup and tests that are common to all plugins
# system tests
require "$::gTestFileDir/../../EC-EC2/systemtest/ntest.common";

$::gProjectImported = 0;
$::gConfigCreated   = 0;
$::gServerRunning   = 0;
$::gtestProjectName = 'EC2TestCases';

$::gHostname = hostname();
$::gIPAddress = inet_ntoa(scalar(gethostbyname($::gHostname)) || 'localhost');

sub importProject() {
    assertOK(
             $::N->import(
                          {
                            file  => "$::gTestFileDir/fakedata/ec2SystemTest.xml",
                            path  => "/projects/EC2TestCases",
                            force => 1
                          }
                         ),
             "import EC2TestCases project"
            );

    assertOK($::N->getProcedure($::gtestProjectName, 'API_AllocateIP'), "API_AllocateIP procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'API_AssociateIP'), "API_AssociateIP procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'API_AttachVolumes'), "API_AttachVolumes procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'API_CreateImage'), "API_CreateImage procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'API_CreateKey'), "API_CreateKey procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'API_DeleteKey'), "API_DeleteKey procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'API_DeleteVolume'), "API_DeleteVolume procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'API_ReleaseIP'), "API_ReleaseIP procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'API_RunInstances'), "API_RunInstances procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'API_StartInstance'), "API_StartInstance procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'API_StopInstance'), "API_StopInstance procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'API_Terminate'), "API_Terminate procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'EC2 Auto Cleanup'), "EC2 Auto Cleanup procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'EC2 Auto Deploy'), "EC2 Auto Deploy procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'EC2 Auto Pause'), "EC2 Auto Pause procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'EC2 Auto Resume'), "EC2 Auto Resume procedure exists");

    assertOK($::N->getProcedure($::gtestProjectName, 'Snap Attached Volume'), "Snap Attached Volume procedure exists");

    $::gProjectImported = 1;
}

sub createConfig() {
    my $xpath = $::N->runProcedure(
                                   "$::gPlugin_name",
                                   {
                                      procedureName   => "CreateConfiguration",
                                      pollInterval    => '0.2',
                                      timeout         => 600,
                                      actualParameter => [{ actualParameterName => 'config', value => 'ec2TestConfiguration' }, { actualParameterName => 'desc', value => 'Amazon AWS configuration' }, { actualParameterName => 'service_url', value => "http://$::gIPAddress:$::gAuxPort/" }, { actualParameterName => 'resource_pool', value => 'local' }, { actualParameterName => 'workspace', value => 'default' }, { actualParameterName => 'attempt', value => '0' }, { actualParameterName => 'credential', value => 'test' }, { actualParameterName => 'debug', value => '1' },],
                                      credential => [{ credentialName => 'test', userName => "user", password => "password", },],
                                   }
                                  );

    assertOK($xpath, "run create configuration procedure");

    # make sure it finished
    my $jobId  = 0;
    my $status = "";
    assertDef($xpath, "runProcedure finished without a timeout");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # examine log files
    $xpath = $::N->getJobDetails($jobId);

    writeFile("$::gCurrentTestDir/../createConfiguration.log", "====Job Details====\n$xpath->{_xml}\n");

    # check that the config and credential exist
    $xpath = $::N->getProperty("/projects/$::EC2/ec2_cfgs/ec2TestConfiguration/desc");
    assertEq("Amazon AWS configuration", $xpath->findvalue("//value")->string_value, "Configuration description");
    $xpath = $::N->getCredential("$::EC2", "ec2TestConfiguration");
    assertEq("user", $xpath->findvalue("//userName")->string_value, 'Credential user');

    $::gConfigCreated = 1;

    #$::N->setProperty("/projects/$::EC2/ec2_cfgs/ec2TestConfiguration/mockdata", "true");
}

sub runServer() {
    my $responses = $::gTestFileDir . "/fakedata/http_responses";
    my $existfile = "'$::gCurrentTestDir/../port-ntest-http.log'";

    # Delete exist file in case it was left over from previous test
    unlink $existfile;

    my $cmdline = "\"$^X\" \"$::gNTestDir/http/fakeHTTPServer.pl\" " . "--log=../ntest-http.log " . "--ip=$::gIPAddress " . "--port=$::gAuxPort " . "--data=$responses ";
    open(SERVER, "-|", $cmdline);

    # Wait (up to) a minute until the 'exists' file is created
    my $timeout = 60;
    while (!-f $existfile and $timeout > 0) {
        $timeout -= 1;
        sleep(1);
    }
    $::gAuxPort = `cat $existfile`;

    $::gServerRunning = 1;
}

sub stopServer () {

    # Create client to send 'Quit' request to server
    require LWP::UserAgent;
    my $userAgent = LWP::UserAgent->new;
    my $request = HTTP::Request->new('POST', "http://$::gIPAddress:$::gAuxPort/");
    $request->content('Action=Quit');
    $userAgent->request($request);

    $::gServerRunning = 0;
}

sub doSetup() {
    if (!$::gServerRunning) {
        runServer();
    }

    if (!$::gProjectImported) {
        importProject();
    }

    if (!$::gConfigCreated) {
        createConfig();
    }
}

ntest 'check-components-present', {}, sub {

    # Check that the plugin contains required components

    my $xpath;
    $xpath = $::N->getSteps("$::gPlugin_name", "CreateConfiguration");
    assertOK($xpath, "CreateConfiguration");
    assertEq("CreateConfiguration", $xpath->findvalue("//step[1]/stepName"), "step 1 is CreateConfiguration");

    $xpath = $::N->getSteps("$::gPlugin_name", "DeleteConfiguration");
    assertOK($xpath, "DeleteConfiguration");
    assertEq("delete", $xpath->findvalue("//step[1]/stepName"), "step 1 is delete");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_AllocateIP");
    assertOK($xpath, "API_AllocateIP");
    assertEq("AllocateIP", $xpath->findvalue("//step[1]/stepName"), "step 1 is AllocateIP");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_AssociateIP");
    assertOK($xpath, "API_AssociateIP");
    assertEq("AssociateIP", $xpath->findvalue("//step[1]/stepName"), "step 1 is AssociateIP");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_AttachVolumes");
    assertOK($xpath, "API_AttachVolumes");
    assertEq("AttachVolume", $xpath->findvalue("//step[1]/stepName"), "step 1 is AttachVolume");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_CreateImage");
    assertOK($xpath, "API_CreateImage");
    assertEq("CreateImage", $xpath->findvalue("//step[1]/stepName"), "step 1 is CreateImage");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_CreateKey");
    assertOK($xpath, "API_CreateKey");
    assertEq("CreateKeyPair", $xpath->findvalue("//step[1]/stepName"), "step 1 is CreateKeyPair");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_DeleteKey");
    assertOK($xpath, "API_DeleteKey");
    assertEq("DeleteKeyPair", $xpath->findvalue("//step[1]/stepName"), "step 1 is DeleteKeyPair");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_DeleteVolume");
    assertOK($xpath, "API_DeleteVolume");
    assertEq("DeleteVolumes", $xpath->findvalue("//step[1]/stepName"), "step 1 is DeleteVolumes");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_ReleaseIP");
    assertOK($xpath, "API_ReleaseIP");
    assertEq("ReleaseIP", $xpath->findvalue("//step[1]/stepName"), "step 1 is ReleaseIP");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_Run");
    assertOK($xpath, "API_Run");
    assertEq("run", $xpath->findvalue("//step[1]/stepName"), "step 1 is run");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_RunInstances");
    assertOK($xpath, "API_RunInstances");
    assertEq("RunInstances", $xpath->findvalue("//step[1]/stepName"), "step 1 is RunInstances");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_StartInstance");
    assertOK($xpath, "API_StartInstance");
    assertEq("StartEBSInstance", $xpath->findvalue("//step[1]/stepName"), "step 1 is StartEBSInstance");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_StopInstance");
    assertOK($xpath, "API_StopInstance");
    assertEq("StopEBSinstances", $xpath->findvalue("//step[1]/stepName"), "step 1 is StopEBSinstances");

    $xpath = $::N->getSteps("$::gPlugin_name", "API_Terminate");
    assertOK($xpath, "API_Terminate");
    assertEq("Terminate", $xpath->findvalue("//step[1]/stepName"), "step 1 is Terminate");

    $xpath = $::N->getSteps("$::gPlugin_name", "EC2 Auto Cleanup");
    assertOK($xpath, "EC2 Auto Cleanup");
    assertEq("Delete Key",   $xpath->findvalue("//step[1]/stepName"), "step 1 is Delete Key");
    assertEq("Terminate",    $xpath->findvalue("//step[2]/stepName"), "step 2 is Terminate");
    assertEq("DeleteVolume", $xpath->findvalue("//step[3]/stepName"), "step 3 is DeleteVolume");

    $xpath = $::N->getSteps("$::gPlugin_name", "EC2 Auto Deploy");
    assertOK($xpath, "EC2 Auto Deploy");
    assertEq("Create Key",     $xpath->findvalue("//step[1]/stepName"), "step 1 is Create Key");
    assertEq("RunInstances",   $xpath->findvalue("//step[2]/stepName"), "step 2 is RunInstances");
    assertEq("ProcessVolumes", $xpath->findvalue("//step[3]/stepName"), "step 3 is ProcessVolumes");
    assertEq("Attach Volumes", $xpath->findvalue("//step[4]/stepName"), "step 4 is Attach Volumes");

    $xpath = $::N->getSteps("$::gPlugin_name", "EC2 Auto Pause");
    assertOK($xpath, "EC2 Auto Pause");
    assertEq("DetachVolumes", $xpath->findvalue("//step[1]/stepName"), "step 1 is DetachVolumes");
    assertEq("Terminate",     $xpath->findvalue("//step[2]/stepName"), "step 2 is Terminate");

    $xpath = $::N->getSteps("$::gPlugin_name", "EC2 Auto Resume");
    assertOK($xpath, "EC2 Auto Resume");
    assertEq("RunInstance",    $xpath->findvalue("//step[1]/stepName"), "step 1 is RunInstance");
    assertEq("Attach Volumes", $xpath->findvalue("//step[2]/stepName"), "step 2 is Attach Volumes");

    $xpath = $::N->getSteps("$::gPlugin_name", "Snap Attached Volume");
    assertOK($xpath, "Snap Attached Volume");
    assertEq("SnapVolume", $xpath->findvalue("//step[1]/stepName"), "step 1 is SnapVolume");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin',{projectName => "$::EC2"});
    assertEq('ec_cloudprovisioning_plugin', $xpath->findvalue("//propertyName")->string_value,
                "Property required by Flow UI. Parent property sheet");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/operations/provision/procedureName',
                                 {projectName => "$::EC2"});
    assertEq('API_RunInstances', $xpath->findvalue("//value")->string_value,
               "Property required by Flow UI, procedure used to provision an instance");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/operations/createConfiguration/procedureName',
                                 {projectName => "$::EC2"});
    assertEq('CreateConfiguration', $xpath->findvalue("//value")->string_value,
               "Property required by Flow UI, procedure used to create configuration");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/operations/deleteConfiguration/procedureName',
                                 {projectName => "$::EC2"});
    assertEq('DeleteConfiguration', $xpath->findvalue("//value")->string_value,
               "Property required by Flow UI, procedure used to delete configuration");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/operations/retireResource/procedureName',
                                 {projectName => "$::EC2"});
    assertEq('API_TearDownResource', $xpath->findvalue("//value")->string_value,
               "Property required by Flow UI, procedure used to tear down a previously provisioned virtual instance and its resource");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/operations/retireResourcePool/procedureName',
                                 {projectName => "$::EC2"});
    assertEq('API_TearDownResource', $xpath->findvalue("//value")->string_value,
               "Property required by Flow UI, procedure used to tear down all previously provisioned virtual instances and their resources in the given resource pool");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/operations/createConfiguration/ui_formRefs/parameterForm',
                                     {projectName => "$::EC2"});
    assertEq('ui_forms/EC2CreateConfigForm', $xpath->findvalue("//value")->string_value,
                   "Property required by Flow UI");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/operations/provision/parameterRefs/configuration', {projectName => "$::EC2"});
    assertEq('config', $xpath->findvalue("//value")->string_value, "Property configuration exists");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/operations/provision/parameterRefs/count', {projectName => "$::EC2"});
    assertEq('count', $xpath->findvalue("//value")->string_value, "Property countParam exists");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/operations/provision/parameterRefs/resourcePool', {projectName => "$::EC2"});
    assertEq('res_poolName', $xpath->findvalue("//value")->string_value, "Property resourcePoolParam exists");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/operations/provision/ui_formRefs/parameterForm',
                                 {projectName => "$::EC2"});
    assertEq('ec_parameterForm', $xpath->findvalue("//value")->string_value,
               "Property required by Flow UI");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/hasConfiguration',
                                 {projectName => "$::EC2"});
    assertEq(1, $xpath->findvalue("//value")->string_value,
               "Flag to indicate that the plugin has associated configuration procedures to Flow UI.");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/configurationLocation',
                                     {projectName => "$::EC2"});
    assertEq('ec2_cfgs', $xpath->findvalue("//value")->string_value,
                   "Property required by Flow UI");

    $xpath = $::N->getProperty('ec_cloudprovisioning_plugin/displayName',
                                         {projectName => "$::EC2"});
    assertEq('Amazon', $xpath->findvalue("//value")->string_value,
                       "Property required by Flow UI");

};

ntest "test auto cleanup successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "EC2 Auto Cleanup",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='Delete Key']/calledProcedure/jobStep[stepName='DeleteKeyPair']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/EC2 Auto Cleanup.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Deleting Amazon EC2 KeyPair -------
                KeyPair keypair1 deleted
                }
               ),
        $data,
        'EC2 Auto Cleanup, step Delete Key successful output'
              );

    # Get the name of the log file
    $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='Terminate']/calledProcedure/jobStep[stepName='Terminate']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/EC2 Auto Cleanup.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Terminate Amazon EC2 Instance -------
                Terminating instance i-instance1
                1 instances terminated.
                Deleting resources.
                }
               ),
        $data,
        'EC2 Auto Cleanup, step Terminate successful output'
              );

    # Get the name of the log file
    $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='DeleteVolume']/calledProcedure/jobStep[stepName='DeleteVolumes']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/EC2 Auto Cleanup.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Delete Dynamic Volume -------
                Deleting Volume v-volume1
                Found status=[available]
                Deleting volume v-volume1
                Volume v-volume1 deleted
                1 volumes deleted.
                }
               ),
        $data,
        'EC2 Auto Cleanup, step DeleteVolume successful output'
              );
};

ntest "test auto deploy successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "EC2 Auto Deploy",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='Create Key']/calledProcedure/jobStep[stepName='CreateKeyPair']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/EC2 Auto Deploy.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    # Both string must appear in a successful output
    assertSubstring(
        "--Creating Amazon EC2 KeyPair -------
Create request...
KeyPair", $data, 'EC2 Auto Deploy, step Create Key successful output'
    );
    assertSubstring("created", $data, 'EC2 Auto Deploy, step Create Key successful output');

    # Get the name of the log file
    $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='RunInstances']/calledProcedure/jobStep[stepName='RunInstances']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/EC2 Auto Deploy.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Run Amazon EC2 Instances -------
                Running 1 instance(s) of EC2AMI in zone us-east-1b as type m1.large with group default
                Run instance returned reservation id reservation1
                Evaluating instance i-instance1 in state running
                1 of 1 instances ready
                Instance i-instance1: IP=ec2-174-129-165-232.compute-1.amazonaws.com  AMI=image1 ZONE=us-east-1b
                Adding i-instance1 to instance list
                Saving instance list i-instance1
                }
               ),
        $data,
        'EC2 Auto Deploy, step RunInstances successful output'
              );

    # Get the name of the log file
    $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='ProcessVolumes']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/EC2 Auto Deploy.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Create Volume  -------
                Creating volume from snapshot in zone us-east-1b
                New volume v-volume1 created from snapshot snapshot1 for instance i-instance1
                Waiting for volume 
                Snapshot snapshot1 used to create volumes
                }
               ),
        $data,
        'EC2 Auto Deploy, step ProcessVolumes successful output'
              );

    # Get the name of the log file
    $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='Attach Volumes']/calledProcedure/jobStep[stepName='AttachVolume']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/EC2 Auto Deploy.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Attach Volumes -------
                Attaching v-volume1 to instance i-instance1
                Volume v-volume1 is in state available
                Trying to attach v-volume1 to i-instance1
                Volume v-volume1 attached to instance i-instance1
                1 volumes were attached to instances.
                }
               ),
        $data,
        'EC2 Auto Deploy, step Attach Volumes successful output'
              );
};

ntest "test auto pause successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "EC2 Auto Pause",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='DetachVolumes']/calledProcedure/jobStep[stepName='DeleteVolumes']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/EC2 Auto Pause.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Delete Dynamic Volume -------
                Deleting Volume v-volume1
                Found status=[in-use]
                Trying to detach v-volume1
                Volume v-volume1 detached
                Waiting for volume v-volume1 to be in available state
                Found status=[available]
                1 volumes detached.
                }
               ),
        $data,
        'EC2 Auto Pause, step DetachVolumes successful output'
              );

    # Get the name of the log file
    $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='Terminate']/calledProcedure/jobStep[stepName='Terminate']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/EC2 Auto Pause.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Terminate Amazon EC2 Instance -------
                Terminating instance i-instance1
                1 instances terminated.
                Deleting resources.
                }
               ),
        $data,
        'EC2 Auto Pause, step Terminate successful output'
              );
};

ntest "test auto resume successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "EC2 Auto Resume",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='RunInstance']/calledProcedure/jobStep[stepName='RunInstances']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/EC2 Auto Resume.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Run Amazon EC2 Instances -------
                Running 1 instance(s) of EC2AMI in zone us-east-1b as type m1.large with group default
                Run instance returned reservation id reservation1
                Evaluating instance i-instance1 in state running
                1 of 1 instances ready
                Instance i-instance1: IP=ec2-174-129-165-232.compute-1.amazonaws.com  AMI=image1 ZONE=us-east-1b
                Adding i-instance1 to instance list
                Saving instance list i-instance1
                }
               ),
        $data,
        'EC2 Auto Resume, step RunInstance successful output'
              );

    # Get the name of the log file
    $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='Attach Volumes']/calledProcedure/jobStep[stepName='AttachVolume']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/EC2 Auto Resume.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Attach Volumes -------
                Attaching v-volume1 to instance i-instance1
                Volume v-volume1 is in state available
                Trying to attach v-volume1 to i-instance1
                Volume v-volume1 attached to instance i-instance1
                1 volumes were attached to instances.
                }
               ),
        $data,
        'EC2 Auto Resume, step Attach Volumes successful output'
              );
};

ntest "test snap attached volume successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "Snap Attached Volume",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='SnapVolume']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/Snap Attached Volume.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Snapping Volume -------
                Created new snapshot snapshot1
                }
               ),
        $data,
        'Snap Attached Volume, step SnapVolume successful output'
              );
};

ntest "test snap attached volume error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "Snap Attached Volume",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='SnapVolume']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/Snap Attached Volume.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Snapping Volume -------
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'Snap Attached Volume, step SnapVolume error output'
              );
};

ntest "test snap attached volume garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "Snap Attached Volume",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='SnapVolume']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/Snap Attached Volume.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'Snap Attached Volume, step SnapVolume garbage output');
};

ntest "test snap attached volume no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "Snap Attached Volume",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='SnapVolume']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/Snap Attached Volume.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Snapping Volume -------
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'Snap Attached Volume, step SnapVolume no response output'
              );
};

ntest "test allocate IP successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_AllocateIP",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='AllocateIP']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_AllocateIP.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Allocating Amazon EC2 Address -------
                Address 10.0.0.1 allocated
                }
               ),
        $data,
        'API_AllocateIP successful output'
              );
};

ntest "test allocate IP error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_AllocateIP",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='AllocateIP']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_AllocateIP.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Allocating Amazon EC2 Address -------
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_AllocateIP error output'
              );
};

ntest "test allocate IP garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_AllocateIP",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='AllocateIP']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_AllocateIP.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'API_AllocateIP garbage output');
};

ntest "test allocate IP no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_AllocateIP",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='AllocateIP']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_AllocateIP.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Allocating Amazon EC2 Address -------
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_AllocateIP no response output'
              );
};

ntest "test associate IP successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_AssociateIP",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='AssociateIP']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_AssociateIP.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Associate Amazon EC2 Address -------
                Address 10.0.0.1 associated with instance i-instance1
                }
               ),
        $data,
        'API_AssociateIP successful output'
              );
};

ntest "test associate IP error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_AssociateIP",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='AssociateIP']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_AssociateIP.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Associate Amazon EC2 Address -------
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_AssociateIP error output'
              );
};

ntest "test associate IP garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_AssociateIP",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='AssociateIP']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_AssociateIP.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'API_AssociateIP garbage output');
};

ntest "test associate IP no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_AssociateIP",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='AssociateIP']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_AssociateIP.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Associate Amazon EC2 Address -------
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_AssociateIP no response output'
              );
};

ntest "test attach volumes successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_AttachVolumes",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='AttachVolume']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_AttachVolumes.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Attach Volumes -------
                Attaching v-volume1 to instance i-instance1
                Volume v-volume1 is in state available
                Trying to attach v-volume1 to i-instance1
                Volume v-volume1 attached to instance i-instance1
                1 volumes were attached to instances.
                }
               ),
        $data,
        'API_AttachVolumes successful output'
              );
};

ntest "test attach volumes error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_AttachVolumes",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='AttachVolume']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_AttachVolumes.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Attach Volumes -------
                Attaching v-volume1 to instance i-instance1
                Volume v-volume1 is in state available
                Trying to attach v-volume1 to i-instance1
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_AttachVolumes error output'
              );
};

ntest "test attach volumes garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_AttachVolumes",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='AttachVolume']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_AttachVolumes.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'API_AttachVolumes garbage output');
};

ntest "test attach volumes no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_AttachVolumes",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='AttachVolume']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_AttachVolumes.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Attach Volumes -------
                Attaching v-volume1 to instance i-instance1
                Volume v-volume1 is in state available
                Trying to attach v-volume1 to i-instance1
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_AttachVolumes no response output'
              );
};

ntest "test create image successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_CreateImage",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='CreateImage']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_CreateImage.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Create EBS Image from existing EBS image -------
                CreateImage returned new AMI=image1
                get-node-from-path: Don't know what to do with path  = 'true' !!!
                AMI image1 state is available
                Image image1 created.
                }
               ),
        $data,
        'API_CreateImage successful output'
              );
};

ntest "test create image error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_CreateImage",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='CreateImage']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_CreateImage.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Create EBS Image from existing EBS image -------
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_CreateImage error output'
              );
};

ntest "test create image garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_CreateImage",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='CreateImage']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_CreateImage.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'API_CreateImage garbage output');
};

ntest "test create image no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_CreateImage",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='CreateImage']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_CreateImage.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Create EBS Image from existing EBS image -------
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_CreateImage no response output'
              );
};

ntest "test create key successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_CreateKey",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='CreateKeyPair']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_CreateKey.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Creating Amazon EC2 KeyPair -------
                Create request...
                KeyPair keypair1 created
                }
               ),
        $data,
        'API_CreateKey successful output'
              );
};

ntest "test create key error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_CreateKey",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='CreateKeyPair']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_CreateKey.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Creating Amazon EC2 KeyPair -------
                Create request...
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_CreateKey error output'
              );
};

ntest "test create key garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_CreateKey",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='CreateKeyPair']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_CreateKey.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'API_CreateKey garbage output');
};

ntest "test create key no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_CreateKey",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='CreateKeyPair']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_CreateKey.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Creating Amazon EC2 KeyPair -------
                Create request...
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_CreateKey no response output'
              );
};

ntest "test delete key successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_DeleteKey",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='DeleteKeyPair']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_DeleteKey.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Deleting Amazon EC2 KeyPair -------
                KeyPair keypair1 deleted
                }
               ),
        $data,
        'API_DeleteKey successful output'
              );
};

ntest "test delete key error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_DeleteKey",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='DeleteKeyPair']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_DeleteKey.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Deleting Amazon EC2 KeyPair -------
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_DeleteKey error output'
              );
};

ntest "test delete key garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_DeleteKey",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='DeleteKeyPair']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_DeleteKey.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'API_DeleteKey garbage output');
};

ntest "test delete key no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_DeleteKey",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='DeleteKeyPair']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_DeleteKey.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Deleting Amazon EC2 KeyPair -------
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_DeleteKey no response output'
              );
};

ntest "test delete volume successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_DeleteVolume",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='DeleteVolumes']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_DeleteVolume.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Delete Dynamic Volume -------
                Deleting Volume v-volume1
                Found status=[available]
                Deleting volume v-volume1
                Volume v-volume1 deleted
                1 volumes deleted.
                }
               ),
        $data,
        'API_DeleteVolume successful output'
              );
};

ntest "test delete volume error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_DeleteVolume",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='DeleteVolumes']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_DeleteVolume.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Delete Dynamic Volume -------
                Deleting Volume v-volume1
                Found status=[available]
                Deleting volume v-volume1
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_DeleteVolume error output'
              );
};

ntest "test delete volume garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_DeleteVolume",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='DeleteVolumes']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_DeleteVolume.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'API_DeleteVolume garbage output');
};

ntest "test delete volume no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_DeleteVolume",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='DeleteVolumes']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_DeleteVolume.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |-- Delete Dynamic Volume -------
                Deleting Volume v-volume1
                Found status=[available]
                Deleting volume v-volume1
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_DeleteVolume no response output'
              );
};

ntest "test release IP successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_ReleaseIP",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='ReleaseIP']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_ReleaseIP.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Releasing Amazon EC2 Address -------
                Address 10.0.0.1 released
                }
               ),
        $data,
        'API_ReleaseIP successful output'
              );
};

ntest "test release IP error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_ReleaseIP",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='ReleaseIP']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_ReleaseIP.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Releasing Amazon EC2 Address -------
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_ReleaseIP error output'
              );
};

ntest "test release IP garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_ReleaseIP",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='ReleaseIP']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_ReleaseIP.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'API_ReleaseIP garbage output');
};

ntest "test release IP no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_ReleaseIP",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='ReleaseIP']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_ReleaseIP.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Releasing Amazon EC2 Address -------
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_ReleaseIP no response output'
              );
};

ntest "test run instances successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_RunInstances",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='RunInstances']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_RunInstances.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Run Amazon EC2 Instances -------
                Running 1 instance(s) of i-instance1 in zone us-east-1b as type m1.small with group default
                Run instance returned reservation id reservation1
                Evaluating instance i-instance1 in state running
                1 of 1 instances ready
                Instance i-instance1: IP=ec2-174-129-165-232.compute-1.amazonaws.com  AMI=image1 ZONE=us-east-1b
                Adding i-instance1 to instance list
                Saving instance list i-instance1
                }
               ),
        $data,
        'API_RunInstances successful output'
              );
};

ntest "test run instances error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_RunInstances",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='RunInstances']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_RunInstances.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Run Amazon EC2 Instances -------
                Running 1 instance(s) of i-instance1 in zone us-east-1b as type m1.small with group default
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_RunInstances error output'
              );
};

ntest "test run instances garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_RunInstances",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='RunInstances']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_RunInstances.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'API_RunInstances garbage output');
};

ntest "test run instances no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_RunInstances",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='RunInstances']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_RunInstances.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Run Amazon EC2 Instances -------
                Running 1 instance(s) of i-instance1 in zone us-east-1b as type m1.small with group default
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_RunInstances no response output'
              );
};

ntest "test start instance successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_StartInstance",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='StartEBSInstance']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_StartInstance.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Start Amazon EC2 Instance -------
                Starting instance
                }
               ),
        $data,
        'API_StartInstance successful output'
              );
};

ntest "test start instance error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_StartInstance",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='StartEBSInstance']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_StartInstance.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Start Amazon EC2 Instance -------
                Starting instance
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_StartInstance error output'
              );
};

ntest "test start instance garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_StartInstance",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='StartEBSInstance']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_StartInstance.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'API_StartInstance garbage output');
};

ntest "test start instance no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_StartInstance",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='StartEBSInstance']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_StartInstance.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Start Amazon EC2 Instance -------
                Starting instance
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_StartInstance no response output'
              );
};

ntest "test stop instance successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_StopInstance",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='StopEBSinstances']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_StopInstance.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Stop Amazon EC2 Instance -------
                Stopping instance
                }
               ),
        $data,
        'API_StopInstance successful output'
              );
};

ntest "test stop instance error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_StopInstance",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='StopEBSinstances']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_StopInstance.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Stop Amazon EC2 Instance -------
                Stopping instance
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_StopInstance error output'
              );
};

ntest "test stop instance garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_StopInstance",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='StopEBSinstances']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_StopInstance.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'API_StopInstance garbage output');
};

ntest "test stop instance no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_StopInstance",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='StopEBSinstances']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_StopInstance.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Stop Amazon EC2 Instance -------
                Stopping instance
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_StopInstance no response output'
              );
};

ntest "test terminate successful", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_Terminate",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='Terminate']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_Terminate.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Terminate Amazon EC2 Instance -------
                Terminating instance i-instance1
                1 instances terminated.
                Deleting resources.
                }
               ),
        $data,
        'API_Terminate successful output'
              );
};

ntest "test terminate error", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_Terminate",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='Terminate']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_Terminate.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Terminate Amazon EC2 Instance -------
                Terminating instance i-instance1
                Caught Exception: Internal Error
                Response Status Code: 501
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_Terminate error output'
              );
};

ntest "test terminate garbage", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_Terminate",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='Terminate']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_Terminate.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertSubstring('An error occurred:', $data, 'API_Terminate garbage output');
};

ntest "test terminate no response", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_Terminate",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }
                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='Terminate']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_Terminate.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |--Terminate Amazon EC2 Instance -------
                Terminating instance i-instance1
                Caught Exception: Maximum number of retry attempts reached :  3
                Response Status Code: 500
                Error Code: 
                Error Type: 
                Request ID: 
                XML: 
                }
               ),
        $data,
        'API_Terminate no response output'
              );
};

ntest "test create tags", {}, sub {
    doSetup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "API_CreateTags",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => []
                                   }

                                  );

    # make sure it finished
    my $jobId  = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . "/" . $xpath->findvalue("//jobStep[stepName='CreateTags']/calledProcedure/jobStep[stepName='run']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/API_CreateTags.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    assertDiff(
        outdent(
            q{
               |Adding Name tag(s) to Amazon EC2 resource(s): i-instance1 with value: InstanceName
                Tag(s) successfully created
                }
               ),
        $data,
        'API_CreateTags successful output'
              );
};

# Stop server
stopServer();

1;

